{
  "address": "0x0199455824a45064a9e64abEAEa3a407C1605C59",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__WinnerTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        }
      ],
      "name": "Lottery_checkUpKeepfalse",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xff5007a759469b6d8f53e04aa5ef957ab170da24961f715cef2ab3e759c75ec3",
  "receipt": {
    "to": null,
    "from": "0x65fa73eFAEcfa785B08808a94ecBB1422Bb64fE4",
    "contractAddress": "0x0199455824a45064a9e64abEAEa3a407C1605C59",
    "transactionIndex": 7,
    "gasUsed": "1213435",
    "logsBloom": "0x
    "blockHash": "0xe0616923d70bec6964a2c63694324ab192d458f86f58075551d55769b604d5a8",
    "transactionHash": "0xff5007a759469b6d8f53e04aa5ef957ab170da24961f715cef2ab3e759c75ec3",
    "logs": [],
    "blockNumber": 3386849,
    "cumulativeGasUsed": "2294886",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103b0a8a00be2ddc778e6e7eaa21791cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1604",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "dbaa6529d6721f36597be3d1206d1564",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__WinnerTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"}],\"name\":\"Lottery_checkUpKeepfalse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jatin Kalra\",\"details\":\"This implements Chainlink VRF V2 & Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is a function that Chainlink Keepers nodes call They look for the `upkeepNeeded` to return true The following should be true in order to return true: i. Our time internal should have passed ii. The lottery should have atleast 1 player, and have some ETH iii. Our subscription is funded with LINK iv. The lottery should be in an \\\"open\\\" state.\"}},\"title\":\"A sample lottery contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A contract for creating an untamperable decentralised smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n// Objective:\\n// 1. Enter the lottery (paying some amount)\\n// 2. Pick a random winner (verifiably random) (Winner to be selected once a parameter is satisfied. Eg: time, asset price, money in liquidity pool etc)\\n// 3. Completely automated:\\n//  * The following should be true in order to return true:\\n//  * i. Our time internal should have passed\\n//  * ii. The lottery should have atleast 1 player, and have some ETH\\n//  * iii. Our subscription is funded with LINK\\n//  * iv. The lottery should be in an \\\"open\\\" state.\\n\\n// As we are picking random winner (2) and we have some event driven execution (3), we will use Chainlink Oracles\\n// Aka Chainlink Oracles for Randomness and Automated Execution (ie Chainlink Keepers)\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Lottery__NotEnoughETHEntered();\\nerror Lottery__WinnerTransferFailed();\\nerror Lottery__NotOpen();\\nerror Lottery_checkUpKeepfalse(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 lotteryState\\n);\\n\\n/**\\n * @title A sample lottery contract\\n * @author Jatin Kalra\\n * @notice A contract for creating an untamperable decentralised smart contract\\n * @dev This implements Chainlink VRF V2 & Chainlink Keepers\\n */\\n\\ncontract Lottery is\\n    VRFConsumerBaseV2 /* Inheritance for overriding the internal function from \\\"./node_modules\\\" */,\\n    KeeperCompatibleInterface\\n{\\n    // Type Declaration\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    } // in background: uint256 0 = OPEN, 1 = CALCULATING\\n\\n    // State Variables\\n    uint256 private immutable i_entranceFee; // minimum price // A storage var\\n    address payable[] private s_players; // payable addresses as if one of them wins, we would be paying them\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator; // this is a contract\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Lottery Variables (new section for state variables)\\n    address private s_recentWinner;\\n    LotteryState private s_lotteryState; // To keep track of contract status (OPEN, CALCULATING) // Other method: uint256 private s_state;\\n    uint256 private s_lastTimeStamp; // To keep track of block.timestamps\\n    uint256 private i_interval; // interval between each winner\\n\\n    // Events\\n    event LotteryEnter(address indexed player);\\n    event RequestedLotteryWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    // Functions\\n    constructor(\\n        address vrfCoordinatorV2, // contract address\\n        uint256 entranceFee,\\n        bytes32 gasLane /* or keyHash */,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    // Objective (1/3: Enter the lottery)\\n    function enterLottery() public payable {\\n        // Other method: require (msg.value > i_entranceFee, \\\"Not Enough ETH!\\\")\\n        if (msg.value < i_entranceFee) {\\n            revert Lottery__NotEnoughETHEntered();\\n        }\\n        if (s_lotteryState != LotteryState.OPEN) {\\n            revert Lottery__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n\\n        // Emit an Event whenever we update a dynamic array or mapping\\n        emit LotteryEnter(msg.sender);\\n    }\\n\\n    // Objective (3/3: Completely automated)\\n\\n    /**\\n     * @dev This is a function that Chainlink Keepers nodes call\\n     * They look for the `upkeepNeeded` to return true\\n     * The following should be true in order to return true:\\n     * i. Our time internal should have passed\\n     * ii. The lottery should have atleast 1 player, and have some ETH\\n     * iii. Our subscription is funded with LINK\\n     * iv. The lottery should be in an \\\"open\\\" state.\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        override\\n        returns (bool upkeepNeeded, bytes memory /*performData*/)\\n    {\\n        //  iv. The lottery should be in an \\\"open\\\" state.\\n        bool isOpen = (LotteryState.OPEN == s_lotteryState);\\n\\n        // i. Our time internal should have passed (ie: (current block.timestamp - last block.timestamp) > winner interval)\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n\\n        //  ii. The lottery should have atleast 1 player, and have some ETH\\n        bool hasPlayers = (s_players.length > 0);\\n\\n        //  iii. Our subscription is funded with LINK\\n        bool hasBalance = (address(this).balance > 0);\\n\\n        // Checking if all booleans are true or not, in order to restart lottery\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    // Objective (2/3: Pick a random winner)\\n    // To pick a random number, a 2 transaction process: Request a random number (1/2); Once requested, do something with it (2/2)\\n    // Request a random number (1/2)\\n    // function requestRandomWinner() external {\\n    function performUpkeep(bytes calldata /*performData*/) external {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\"); // checking if heckUpKeep is true\\n        if (!upkeepNeeded) {\\n            revert Lottery_checkUpKeepfalse(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_lotteryState)\\n            );\\n        }\\n\\n        s_lotteryState = LotteryState.CALCULATING; // Updating status using enum\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane, // aka keyHash; aka max gas price you are willing to pay for a request in wei; aka setting a gas ceiling\\n            i_subscriptionId, // aka a uint64 subscription ID that this contract uses for funding requests\\n            REQUEST_CONFIRMATIONS, // A uint16 which says how many confirmations the chainlink node should wait before responding\\n            i_callbackGasLimit, // A uint32 which sets gas limit for callback request aka `fulfillRandomWords()`\\n            NUM_WORDS // a uint32 about how many random number we want to get\\n        );\\n        emit RequestedLotteryWinner(requestId);  // This emit is redundant as its already coded in vrfcoordinatorv2mock\\n\\n    }\\n\\n    // Once requested, do something with it (2/2); Here: Pick a random winner from the player's array and send him the money\\n    function fulfillRandomWords(\\n        uint256 /* requestId */,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_lotteryState = LotteryState.OPEN; // Changing status to open after winner selection\\n\\n        // Sending money to winner\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Lottery__WinnerTransferFailed();\\n        } // error report\\n        // Keeping a list of all winners\\n        emit WinnerPicked(recentWinner);\\n\\n        // Resetting array & timestamp\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    // View & Pure Functions\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayers(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x6810e7b9883a4f0758ddd133c593f9a2bfbaaa748b3cf2eb924ab69ad9cd8f02\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620017b2380380620017b2833981810160405281019062000038919062000292565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c6200032e565b5b021790555042600281905550806003819055505050505050506200035d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200015e8262000131565b9050919050565b620001708162000151565b81146200017c57600080fd5b50565b600081519050620001908162000165565b92915050565b6000819050919050565b620001ab8162000196565b8114620001b757600080fd5b50565b600081519050620001cb81620001a0565b92915050565b6000819050919050565b620001e681620001d1565b8114620001f257600080fd5b50565b6000815190506200020681620001db565b92915050565b600067ffffffffffffffff82169050919050565b6200022b816200020c565b81146200023757600080fd5b50565b6000815190506200024b8162000220565b92915050565b600063ffffffff82169050919050565b6200026c8162000251565b81146200027857600080fd5b50565b6000815190506200028c8162000261565b92915050565b60008060008060008060c08789031215620002b257620002b16200012c565b5b6000620002c289828a016200017f565b9650506020620002d589828a01620001ba565b9550506040620002e889828a01620001f5565b9450506060620002fb89828a016200023a565b93505060806200030e89828a016200027b565b92505060a06200032189828a01620001ba565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516113f7620003bb600039600061051f015260006104fc015260006104db0152600061049f0152600081816102fa0152610717015260008181610320015261037401526113f76000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f5780636e04ff0d116100595780636e04ff0d1461025857806391ad27b414610296578063c1af5785146102c1578063fd6673f5146102cb576100c2565b806353a2c19a146101d75780635f1b0fd8146102025780636b68c03c1461022d576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063460e20491461016f578063473f1ddc146101ac575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610b81565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610d35565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d9190610b81565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610dec565b6103e8565b005b34801561017b57600080fd5b5061019660048036038101906101919190610e39565b6105d8565b6040516101a39190610ea7565b60405180910390f35b3480156101b857600080fd5b506101c161061f565b6040516101ce9190610ea7565b60405180910390f35b3480156101e357600080fd5b506101ec610649565b6040516101f99190610b81565b60405180910390f35b34801561020e57600080fd5b50610217610658565b6040516102249190610b81565b60405180910390f35b34801561023957600080fd5b50610242610665565b60405161024f9190610f39565b60405180910390f35b34801561026457600080fd5b5061027f600480360381019061027a9190611009565b61067c565b60405161028d9291906110ec565b60405180910390f35b3480156102a257600080fd5b506102ab61070b565b6040516102b89190610b81565b60405180910390f35b6102c9610715565b005b3480156102d757600080fd5b506102e0610884565b6040516102ed9190610b81565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c792919061111c565b60405180910390fd5b6103da8282610890565b5050565b6000600254905090565b60006104026040518060200160405280600081525061067c565b509050806104715747600080549050600160149054906101000a900460ff16600181111561043357610432610ec2565b5b6040517f3c96b78a00000000000000000000000000000000000000000000000000000000815260040161046893929190611145565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561049657610495610ec2565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105609594939291906111f4565b6020604051808303816000875af115801561057f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a3919061125c565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b60008082815481106105ed576105ec611289565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660018111156106a4576106a3610ec2565b5b600060018111156106b8576106b7610ec2565b5b1490506000600354600254426106ce91906112e7565b119050600080600080549050119050600080471190508380156106ee5750825b80156106f75750815b80156107005750805b955050505050915091565b6000600354905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561076f576040517fec269fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561078357610782610ec2565b5b600160149054906101000a900460ff1660018111156107a5576107a4610ec2565b5b146107dc576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b60008080549050905090565b60008080549050826000815181106108ab576108aa611289565b5b60200260200101516108bd919061134a565b905060008082815481106108d4576108d3611289565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083600181111561096857610967610ec2565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610993906113ac565b60006040518083038185875af1925050503d80600081146109d0576040519150601f19603f3d011682016040523d82523d6000602084013e6109d5565b606091505b5050905080610a10576040517f061104de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2600067ffffffffffffffff811115610a6e57610a6d610bf2565b5b604051908082528060200260200182016040528015610a9c5781602001602082028036833780820191505090505b5060009080519060200190610ab2929190610ac1565b50426002819055505050505050565b828054828255906000526020600020908101928215610b3a579160200282015b82811115610b395782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ae1565b5b509050610b479190610b4b565b5090565b5b80821115610b64576000816000905550600101610b4c565b5090565b6000819050919050565b610b7b81610b68565b82525050565b6000602082019050610b966000830184610b72565b92915050565b6000604051905090565b600080fd5b600080fd5b610bb981610b68565b8114610bc457600080fd5b50565b600081359050610bd681610bb0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c2a82610be1565b810181811067ffffffffffffffff82111715610c4957610c48610bf2565b5b80604052505050565b6000610c5c610b9c565b9050610c688282610c21565b919050565b600067ffffffffffffffff821115610c8857610c87610bf2565b5b602082029050602081019050919050565b600080fd5b6000610cb1610cac84610c6d565b610c52565b90508083825260208201905060208402830185811115610cd457610cd3610c99565b5b835b81811015610cfd5780610ce98882610bc7565b845260208401935050602081019050610cd6565b5050509392505050565b600082601f830112610d1c57610d1b610bdc565b5b8135610d2c848260208601610c9e565b91505092915050565b60008060408385031215610d4c57610d4b610ba6565b5b6000610d5a85828601610bc7565b925050602083013567ffffffffffffffff811115610d7b57610d7a610bab565b5b610d8785828601610d07565b9150509250929050565b600080fd5b60008083601f840112610dac57610dab610bdc565b5b8235905067ffffffffffffffff811115610dc957610dc8610d91565b5b602083019150836001820283011115610de557610de4610c99565b5b9250929050565b60008060208385031215610e0357610e02610ba6565b5b600083013567ffffffffffffffff811115610e2157610e20610bab565b5b610e2d85828601610d96565b92509250509250929050565b600060208284031215610e4f57610e4e610ba6565b5b6000610e5d84828501610bc7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e9182610e66565b9050919050565b610ea181610e86565b82525050565b6000602082019050610ebc6000830184610e98565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f0257610f01610ec2565b5b50565b6000819050610f1382610ef1565b919050565b6000610f2382610f05565b9050919050565b610f3381610f18565b82525050565b6000602082019050610f4e6000830184610f2a565b92915050565b600080fd5b600067ffffffffffffffff821115610f7457610f73610bf2565b5b610f7d82610be1565b9050602081019050919050565b82818337600083830152505050565b6000610fac610fa784610f59565b610c52565b905082815260208101848484011115610fc857610fc7610f54565b5b610fd3848285610f8a565b509392505050565b600082601f830112610ff057610fef610bdc565b5b8135611000848260208601610f99565b91505092915050565b60006020828403121561101f5761101e610ba6565b5b600082013567ffffffffffffffff81111561103d5761103c610bab565b5b61104984828501610fdb565b91505092915050565b60008115159050919050565b61106781611052565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110a757808201518184015260208101905061108c565b60008484015250505050565b60006110be8261106d565b6110c88185611078565b93506110d8818560208601611089565b6110e181610be1565b840191505092915050565b6000604082019050611101600083018561105e565b818103602083015261111381846110b3565b90509392505050565b60006040820190506111316000830185610e98565b61113e6020830184610e98565b9392505050565b600060608201905061115a6000830186610b72565b6111676020830185610b72565b6111746040830184610b72565b949350505050565b6000819050919050565b61118f8161117c565b82525050565b600067ffffffffffffffff82169050919050565b6111b281611195565b82525050565b600061ffff82169050919050565b6111cf816111b8565b82525050565b600063ffffffff82169050919050565b6111ee816111d5565b82525050565b600060a0820190506112096000830188611186565b61121660208301876111a9565b61122360408301866111c6565b61123060608301856111e5565b61123d60808301846111e5565b9695505050505050565b60008151905061125681610bb0565b92915050565b60006020828403121561127257611271610ba6565b5b600061128084828501611247565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112f282610b68565b91506112fd83610b68565b9250828203905081811115611315576113146112b8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061135582610b68565b915061136083610b68565b9250826113705761136f61131b565b5b828206905092915050565b600081905092915050565b50565b600061139660008361137b565b91506113a182611386565b600082019050919050565b60006113b782611389565b915081905091905056fea26469706673582212204199346f731001178c7e43b0a05a40c69a039070c3b4c4661f541b396a8283f464736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f5780636e04ff0d116100595780636e04ff0d1461025857806391ad27b414610296578063c1af5785146102c1578063fd6673f5146102cb576100c2565b806353a2c19a146101d75780635f1b0fd8146102025780636b68c03c1461022d576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063460e20491461016f578063473f1ddc146101ac575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610b81565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610d35565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d9190610b81565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610dec565b6103e8565b005b34801561017b57600080fd5b5061019660048036038101906101919190610e39565b6105d8565b6040516101a39190610ea7565b60405180910390f35b3480156101b857600080fd5b506101c161061f565b6040516101ce9190610ea7565b60405180910390f35b3480156101e357600080fd5b506101ec610649565b6040516101f99190610b81565b60405180910390f35b34801561020e57600080fd5b50610217610658565b6040516102249190610b81565b60405180910390f35b34801561023957600080fd5b50610242610665565b60405161024f9190610f39565b60405180910390f35b34801561026457600080fd5b5061027f600480360381019061027a9190611009565b61067c565b60405161028d9291906110ec565b60405180910390f35b3480156102a257600080fd5b506102ab61070b565b6040516102b89190610b81565b60405180910390f35b6102c9610715565b005b3480156102d757600080fd5b506102e0610884565b6040516102ed9190610b81565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c792919061111c565b60405180910390fd5b6103da8282610890565b5050565b6000600254905090565b60006104026040518060200160405280600081525061067c565b509050806104715747600080549050600160149054906101000a900460ff16600181111561043357610432610ec2565b5b6040517f3c96b78a00000000000000000000000000000000000000000000000000000000815260040161046893929190611145565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561049657610495610ec2565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105609594939291906111f4565b6020604051808303816000875af115801561057f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a3919061125c565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b60008082815481106105ed576105ec611289565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660018111156106a4576106a3610ec2565b5b600060018111156106b8576106b7610ec2565b5b1490506000600354600254426106ce91906112e7565b119050600080600080549050119050600080471190508380156106ee5750825b80156106f75750815b80156107005750805b955050505050915091565b6000600354905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561076f576040517fec269fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561078357610782610ec2565b5b600160149054906101000a900460ff1660018111156107a5576107a4610ec2565b5b146107dc576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b60008080549050905090565b60008080549050826000815181106108ab576108aa611289565b5b60200260200101516108bd919061134a565b905060008082815481106108d4576108d3611289565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083600181111561096857610967610ec2565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610993906113ac565b60006040518083038185875af1925050503d80600081146109d0576040519150601f19603f3d011682016040523d82523d6000602084013e6109d5565b606091505b5050905080610a10576040517f061104de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2600067ffffffffffffffff811115610a6e57610a6d610bf2565b5b604051908082528060200260200182016040528015610a9c5781602001602082028036833780820191505090505b5060009080519060200190610ab2929190610ac1565b50426002819055505050505050565b828054828255906000526020600020908101928215610b3a579160200282015b82811115610b395782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ae1565b5b509050610b479190610b4b565b5090565b5b80821115610b64576000816000905550600101610b4c565b5090565b6000819050919050565b610b7b81610b68565b82525050565b6000602082019050610b966000830184610b72565b92915050565b6000604051905090565b600080fd5b600080fd5b610bb981610b68565b8114610bc457600080fd5b50565b600081359050610bd681610bb0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c2a82610be1565b810181811067ffffffffffffffff82111715610c4957610c48610bf2565b5b80604052505050565b6000610c5c610b9c565b9050610c688282610c21565b919050565b600067ffffffffffffffff821115610c8857610c87610bf2565b5b602082029050602081019050919050565b600080fd5b6000610cb1610cac84610c6d565b610c52565b90508083825260208201905060208402830185811115610cd457610cd3610c99565b5b835b81811015610cfd5780610ce98882610bc7565b845260208401935050602081019050610cd6565b5050509392505050565b600082601f830112610d1c57610d1b610bdc565b5b8135610d2c848260208601610c9e565b91505092915050565b60008060408385031215610d4c57610d4b610ba6565b5b6000610d5a85828601610bc7565b925050602083013567ffffffffffffffff811115610d7b57610d7a610bab565b5b610d8785828601610d07565b9150509250929050565b600080fd5b60008083601f840112610dac57610dab610bdc565b5b8235905067ffffffffffffffff811115610dc957610dc8610d91565b5b602083019150836001820283011115610de557610de4610c99565b5b9250929050565b60008060208385031215610e0357610e02610ba6565b5b600083013567ffffffffffffffff811115610e2157610e20610bab565b5b610e2d85828601610d96565b92509250509250929050565b600060208284031215610e4f57610e4e610ba6565b5b6000610e5d84828501610bc7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e9182610e66565b9050919050565b610ea181610e86565b82525050565b6000602082019050610ebc6000830184610e98565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f0257610f01610ec2565b5b50565b6000819050610f1382610ef1565b919050565b6000610f2382610f05565b9050919050565b610f3381610f18565b82525050565b6000602082019050610f4e6000830184610f2a565b92915050565b600080fd5b600067ffffffffffffffff821115610f7457610f73610bf2565b5b610f7d82610be1565b9050602081019050919050565b82818337600083830152505050565b6000610fac610fa784610f59565b610c52565b905082815260208101848484011115610fc857610fc7610f54565b5b610fd3848285610f8a565b509392505050565b600082601f830112610ff057610fef610bdc565b5b8135611000848260208601610f99565b91505092915050565b60006020828403121561101f5761101e610ba6565b5b600082013567ffffffffffffffff81111561103d5761103c610bab565b5b61104984828501610fdb565b91505092915050565b60008115159050919050565b61106781611052565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110a757808201518184015260208101905061108c565b60008484015250505050565b60006110be8261106d565b6110c88185611078565b93506110d8818560208601611089565b6110e181610be1565b840191505092915050565b6000604082019050611101600083018561105e565b818103602083015261111381846110b3565b90509392505050565b60006040820190506111316000830185610e98565b61113e6020830184610e98565b9392505050565b600060608201905061115a6000830186610b72565b6111676020830185610b72565b6111746040830184610b72565b949350505050565b6000819050919050565b61118f8161117c565b82525050565b600067ffffffffffffffff82169050919050565b6111b281611195565b82525050565b600061ffff82169050919050565b6111cf816111b8565b82525050565b600063ffffffff82169050919050565b6111ee816111d5565b82525050565b600060a0820190506112096000830188611186565b61121660208301876111a9565b61122360408301866111c6565b61123060608301856111e5565b61123d60808301846111e5565b9695505050505050565b60008151905061125681610bb0565b92915050565b60006020828403121561127257611271610ba6565b5b600061128084828501611247565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112f282610b68565b91506112fd83610b68565b9250828203905081811115611315576113146112b8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061135582610b68565b915061136083610b68565b9250826113705761136f61131b565b5b828206905092915050565b600081905092915050565b50565b600061139660008361137b565b91506113a182611386565b600082019050919050565b60006113b782611389565b915081905091905056fea26469706673582212204199346f731001178c7e43b0a05a40c69a039070c3b4c4661f541b396a8283f464736f6c63430008120033",
  "devdoc": {
    "author": "Jatin Kalra",
    "details": "This implements Chainlink VRF V2 & Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is a function that Chainlink Keepers nodes call They look for the `upkeepNeeded` to return true The following should be true in order to return true: i. Our time internal should have passed ii. The lottery should have atleast 1 player, and have some ETH iii. Our subscription is funded with LINK iv. The lottery should be in an \"open\" state."
      }
    },
    "title": "A sample lottery contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A contract for creating an untamperable decentralised smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 197,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 214,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 217,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)192"
      },
      {
        "astId": 219,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 221,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "i_interval",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)192": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}